{"version":3,"file":"microbit.umd.js","sources":["../src/promise-queue.ts","../src/services/device-information.ts","../src/service-helper.ts","../src/event-dispatcher.ts","../src/services/button.ts","../src/services/led.ts","../src/services/temperature.ts","../src/services/accelerometer.ts","../src/services/magnetometer.ts","../src/services/io-pin.ts","../src/services/uart.ts","../src/services/event.ts","../src/services/dfu-control.ts","../src/services/rpc.ts","../src/index.ts"],"sourcesContent":["/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * @hidden\n */\ninterface QueuedPromise {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fn: () => Promise<any>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    resolve: (value: any | PromiseLike<any>) => void;\n    reject: (reason?: Error) => void;\n}\n\n/**\n * @hidden\n */\nexport class PromiseQueue {\n\n    private queue: QueuedPromise[] = [];\n    private running = 0;\n\n    constructor(private concurrent = 1) {\n    }\n\n    private async pump(): Promise<void> {\n        if (this.running >= this.concurrent) {\n            return;\n        }\n\n        const promise = this.queue.shift();\n\n        if (!promise) {\n            return;\n        }\n\n        this.running ++;\n\n        try {\n            const result = await promise.fn();\n            promise.resolve(result);\n        } catch (error) {\n            promise.reject(error as Error);\n        }\n\n        this.running --;\n        return this.pump();\n    }\n\n    public add<T>(fn: () => Promise<T>): Promise<T> {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                fn,\n                resolve,\n                reject\n            });\n\n            return this.pump();\n        });\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum DeviceInformationCharacteristic {\n    modelNumber = '00002a24-0000-1000-8000-00805f9b34fb',\n    serialNumber = '00002a25-0000-1000-8000-00805f9b34fb',\n    firmwareRevision = '00002a26-0000-1000-8000-00805f9b34fb',\n    hardwareRevision = '00002a27-0000-1000-8000-00805f9b34fb',\n    manufacturer = '00002a29-0000-1000-8000-00805f9b34fb'\n}\n\n/**\n * Device information structure\n */\nexport interface DeviceInformation {\n    /**\n     * Model Number\n     */\n    modelNumber?: string;\n    /**\n     * Serial Number\n     */\n    serialNumber?: string;\n    /**\n     * Firmware Revision\n     */\n    firmwareRevision?: string;\n    /**\n     * Hardware Revision\n     */\n    hardwareRevision?: string;\n    /**\n     * Manufacturer Name\n     */\n    manufacturer?: string;\n}\n\n/**\n * Device Information Service\n */\nexport class DeviceInformationService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = '0000180a-0000-1000-8000-00805f9b34fb';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<DeviceInformationService> {\n        return new DeviceInformationService(service);\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Read device information\n     */\n    public async readDeviceInformation(): Promise<DeviceInformation> {\n        const info: DeviceInformation = {};\n\n        const modelNumber = await this.readStringCharacteristic(DeviceInformationCharacteristic.modelNumber);\n        if (modelNumber) info.modelNumber = modelNumber;\n\n        const serialNumber = await this.readStringCharacteristic(DeviceInformationCharacteristic.serialNumber);\n        if (serialNumber) info.serialNumber = serialNumber;\n\n        const firmwareRevision = await this.readStringCharacteristic(DeviceInformationCharacteristic.firmwareRevision);\n        if (firmwareRevision) info.firmwareRevision = firmwareRevision;\n\n        const hardwareRevision = await this.readStringCharacteristic(DeviceInformationCharacteristic.hardwareRevision);\n        if (hardwareRevision) info.hardwareRevision = hardwareRevision;\n\n        const manufacturer = await this.readStringCharacteristic(DeviceInformationCharacteristic.manufacturer);\n        if (manufacturer) info.manufacturer = manufacturer;\n\n        return info;\n    }\n\n    private async readStringCharacteristic(uuid: BluetoothCharacteristicUUID): Promise<string | undefined> {\n        try {\n            const view = await this.helper.getCharacteristicValue(uuid);\n            const decoder = new TextDecoder();\n            return decoder.decode(view.buffer);\n        } catch (_e) {\n            return undefined;\n        }\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from 'events';\nimport { PromiseQueue } from './promise-queue';\n\n/**\n * @hidden\n */\nexport interface ServiceEventHandler {\n    characteristic: BluetoothCharacteristicUUID;\n    handler: (event: Event) => void;\n}\n\n/**\n * @hidden\n */\nexport class ServiceHelper {\n\n    private static queue = new PromiseQueue();\n\n    private characteristics?: BluetoothRemoteGATTCharacteristic[];\n\n    constructor(private service: BluetoothRemoteGATTService, private emitter?: EventEmitter) {\n    }\n\n    private async getCharacteristic(uuid: BluetoothCharacteristicUUID): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n        if (!this.characteristics) {\n            this.characteristics = await this.service.getCharacteristics();\n        }\n\n        return this.characteristics.find(characteristic => characteristic.uuid === uuid);\n    }\n\n    public async getCharacteristicValue(uuid: BluetoothCharacteristicUUID): Promise<DataView> {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            throw new Error('Unable to locate characteristic');\n        }\n\n        return await ServiceHelper.queue.add<DataView>(async () => characteristic.readValue());\n    }\n\n    public async setCharacteristicValue(uuid: BluetoothCharacteristicUUID, value: BufferSource): Promise<void> {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            throw new Error('Unable to locate characteristic');\n        }\n\n        await ServiceHelper.queue.add(async () => characteristic.writeValue(value));\n    }\n\n    public async handleListener(event: string, uuid: BluetoothCharacteristicUUID, handler: (event: Event) => void) {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            return;\n        }\n\n        await ServiceHelper.queue.add(async () => characteristic.startNotifications());\n\n        this.emitter!.on('newListener', (emitterEvent: string) => {\n            if (emitterEvent !== event || this.emitter!.listenerCount(event) > 0) {\n                return;\n            }\n\n            return ServiceHelper.queue.add(async () => characteristic.addEventListener('characteristicvaluechanged', handler));\n        });\n\n        this.emitter!.on('removeListener', (emitterEvent: string) => {\n            if (emitterEvent !== event || this.emitter!.listenerCount(event) > 0) {\n                return;\n            }\n\n            return ServiceHelper.queue.add(async () => characteristic.removeEventListener('characteristicvaluechanged', handler));\n        });\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from 'events';\n\n/**\n * @hidden\n */\nexport interface TypedDispatcher<T> {\n    addEventListener<K extends keyof T>(type: K, listener: (event: CustomEvent<T[K]>) => void): void;\n    removeEventListener<K extends keyof T>(type: K, callback: (event: CustomEvent<T[K]>) => void): void;\n    dispatchEvent(event: CustomEvent<T>): boolean;\n    dispatchEvent<K extends keyof T>(type: K, detail: T[K]): boolean;\n    addListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    on<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    once<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    off<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependOnceListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeAllListeners<K extends keyof T>(event?: K): this;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    listeners<K extends keyof T>(event: K): (Function)[];\n    emit<K extends keyof T>(event: K, data: T[K]): boolean;\n    eventNames<K extends keyof T>(): Array<K>;\n    listenerCount<K extends keyof T>(type: K): number;\n    setMaxListeners(n: number): this;\n    getMaxListeners(): number;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    rawListeners<K extends keyof T>(event: K): (Function)[];\n}\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter implements EventTarget {\n\n    private isEventListenerObject = (listener: EventListenerOrEventListenerObject): listener is EventListenerObject => (listener as EventListenerObject).handleEvent !== undefined;\n\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject | null) {\n        if (listener) {\n            const handler = this.isEventListenerObject(listener) ? listener.handleEvent : listener;\n            super.addListener(type, handler);\n        }\n    }\n\n    public removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null) {\n        if (callback) {\n            const handler = this.isEventListenerObject(callback) ? callback.handleEvent : callback;\n            super.removeListener(type, handler);\n        }\n    }\n\n    public dispatchEvent(event: Event): boolean;\n    public dispatchEvent<T>(type: string, detail: T): boolean;\n    public dispatchEvent<T>(eventOrType: Event | string, detail?: T): boolean {\n        let event: Event;\n        if (typeof eventOrType === 'string') {\n            event = new CustomEvent(eventOrType, {\n                detail\n            });\n        } else {\n            event = eventOrType;\n        }\n\n        return super.emit(event.type, event);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum ButtonCharacteristic {\n    buttonAState = 'e95dda90-251d-470a-a062-fa1922dfa9a8',\n    buttonBState = 'e95dda91-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * Button state enum\n */\nexport enum ButtonState {\n    /**\n     * Button released\n     */\n    Release = 0,\n    /**\n     * Button pressed - short\n     */\n    ShortPress = 1,\n    /**\n     * Button pressed - long\n     */\n    LongPress = 2\n}\n\n/**\n * Events raised by the button service\n */\nexport interface ButtonEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof ButtonEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof ButtonEvents;\n    /**\n     * Button A state changed event\n     */\n    buttonastatechanged: ButtonState;\n    /**\n     * Button B state changed event\n     */\n    buttonbstatechanged: ButtonState;\n}\n\n/**\n * Button Service\n */\nexport class ButtonService extends (EventDispatcher as new() => TypedDispatcher<ButtonEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95d9882-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<ButtonService> {\n        const bluetoothService = new ButtonService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('buttonastatechanged', ButtonCharacteristic.buttonAState, this.buttonAStateChangedHandler.bind(this));\n        await this.helper.handleListener('buttonbstatechanged', ButtonCharacteristic.buttonBState, this.buttonBStateChangedHandler.bind(this));\n    }\n\n    /**\n     * Read state of button A\n     */\n    public async readButtonAState(): Promise<ButtonState> {\n        const view = await this.helper.getCharacteristicValue(ButtonCharacteristic.buttonAState);\n        return view.getUint8(0);\n    }\n\n    /**\n     * Read state of button B\n     */\n    public async readButtonBState(): Promise<ButtonState> {\n        const view = await this.helper.getCharacteristicValue(ButtonCharacteristic.buttonBState);\n        return view.getUint8(0);\n    }\n\n    private buttonAStateChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent('buttonastatechanged', view.getUint8(0));\n    }\n\n    private buttonBStateChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent('buttonbstatechanged', view.getUint8(0));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum LedCharacteristic {\n    ledMatrixState = 'e95d7b77-251d-470a-a062-fa1922dfa9a8',\n    ledText = 'e95d93ee-251d-470a-a062-fa1922dfa9a8',\n    scrollingDelay = 'e95d0d2d-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * LED matrix structure\n */\nexport type LedMatrix = [\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean]\n];\n\n/**\n * LED Service\n */\nexport class LedService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95dd91d-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<LedService> {\n        return new LedService(service);\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Write text to the LED matrix\n     * @param text The text to display\n     */\n    public async writeText(text: string): Promise<void> {\n        const encoded = this.encodeString(text);\n        return this.helper.setCharacteristicValue(LedCharacteristic.ledText, encoded);\n    }\n\n    /**\n     * Read matrix state\n     */\n    public async readMatrixState(): Promise<LedMatrix> {\n        const view = await this.helper.getCharacteristicValue(LedCharacteristic.ledMatrixState);\n        return this.viewToLedMatrix(view);\n    }\n\n    /**\n     * Write matrix state\n     * @param state The matrix data to set\n     */\n    public async writeMatrixState(state: LedMatrix): Promise<void> {\n        const view = this.ledMatrixToView(state);\n        return this.helper.setCharacteristicValue(LedCharacteristic.ledMatrixState, view);\n    }\n\n    /**\n     * Get scrolling delay\n     */\n    public async getScrollingDelay(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(LedCharacteristic.scrollingDelay);\n        return view.getUint16(0, true);\n    }\n\n    /**\n     * Set scrolling delay\n     * @param delay The delay to set (milliseconds)\n     */\n    public async setScrollingDelay(delay: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, delay, true);\n        return this.helper.setCharacteristicValue(LedCharacteristic.scrollingDelay, view);\n    }\n\n    private encodeString(text: string): ArrayBuffer {\n        const encoder = new TextEncoder();\n        return encoder.encode(text);\n    }\n\n    private viewToLedMatrix(view: DataView): LedMatrix {\n        const matrix: boolean[][] = [];\n        for (let i = 0; i < 5; i ++) {\n            matrix[i] = this.byteToBoolArray(view.getUint8(i));\n        }\n        return matrix as LedMatrix;\n    }\n\n    private byteToBoolArray(byte: number): boolean[] {\n        const bools = [false, false, false, false, false];\n        for (let i = 0; i < bools.length; i++) {\n            bools[i] = (byte & 1) === 1;\n            byte >>= 1;\n        }\n        return bools.reverse();\n    }\n\n    private ledMatrixToView(matrix: LedMatrix): DataView {\n        const view = new DataView(new ArrayBuffer(5));\n        for (let i = 0; i < 5; i ++) {\n            view.setUint8(i, this.boolArrayToByte(matrix[i]));\n        }\n        return view;\n    }\n\n    private boolArrayToByte(bools: boolean[]): number {\n        return bools.reduce((byte, bool) => byte << 1 | (bool ? 1 : 0), 0);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { TypedDispatcher, EventDispatcher } from '../event-dispatcher';\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum TemperatureCharacteristic {\n    temperature = 'e95d9250-251d-470a-a062-fa1922dfa9a8',\n    temperaturePeriod = 'e95d1b25-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * Events raised by the temperature service\n */\nexport interface TemperatureEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof TemperatureEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof TemperatureEvents;\n    /**\n     * Temperature changed event\n     */\n    temperaturechanged: number;\n}\n\n/**\n * Temperature Service\n */\nexport class TemperatureService extends (EventDispatcher as new() => TypedDispatcher<TemperatureEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95d6100-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<TemperatureService> {\n        const bluetoothService = new TemperatureService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('temperaturechanged', TemperatureCharacteristic.temperature, this.temperatureChangedHandler.bind(this));\n    }\n\n    /**\n     * Read temperature\n     */\n    public async readTemperature(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(TemperatureCharacteristic.temperature);\n        return view.getInt8(0);\n    }\n\n    /**\n     * Get temperature sample period\n     */\n    public async getTemperaturePeriod(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(TemperatureCharacteristic.temperaturePeriod);\n        return view.getUint16(0, true);\n    }\n\n    /**\n     * Set temperature sample period\n     * @param frequency The frequency to use (milliseconds)\n     */\n    public async setTemperaturePeriod(frequency: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return await this.helper.setCharacteristicValue(TemperatureCharacteristic.temperaturePeriod, view);\n    }\n\n    private temperatureChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent('temperaturechanged', view.getInt8(0));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum AccelerometerCharacteristic {\n    accelerometerData = 'e95dca4b-251d-470a-a062-fa1922dfa9a8',\n    accelerometerPeriod = 'e95dfb24-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * Data received from the accelerometer\n */\nexport interface AccelerometerData {\n    /**\n     * Force in direction X\n     */\n    x: number;\n    /**\n     * Force in direction Y\n     */\n    y: number;\n    /**\n     * Force in direction Z\n     */\n    z: number;\n}\n\n/**\n * The sample period to read accelerometer data (milliseconds)\n */\nexport type AccelerometerPeriod = 1 | 2 | 5 | 10 | 20 | 80 | 160 | 640;\n\n/**\n * Events raised by the accelerometer service\n */\nexport interface AccelerometerEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof AccelerometerEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof AccelerometerEvents;\n    /**\n     * Accelerometer data changed event\n     */\n    accelerometerdatachanged: AccelerometerData;\n}\n\n/**\n * Accelerometer Service\n */\nexport class AccelerometerService extends (EventDispatcher as new() => TypedDispatcher<AccelerometerEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95d0753-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<AccelerometerService> {\n        const bluetoothService = new AccelerometerService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('accelerometerdatachanged', AccelerometerCharacteristic.accelerometerData, this.accelerometerDataChangedHandler.bind(this));\n    }\n\n    /**\n     * Read acceleromter data\n     */\n    public async readAccelerometerData(): Promise<AccelerometerData> {\n        const view = await this.helper.getCharacteristicValue(AccelerometerCharacteristic.accelerometerData);\n        return this.dataViewToAccelerometerData(view);\n    }\n\n    /**\n     * Get accelerometer sample period\n     */\n    public async getAccelerometerPeriod(): Promise<AccelerometerPeriod> {\n        const view = await this.helper.getCharacteristicValue(AccelerometerCharacteristic.accelerometerPeriod);\n        return view.getUint16(0, true) as AccelerometerPeriod;\n    }\n\n    /**\n     * Set accelerometer sample period\n     * @param frequency The frequency interval to use\n     */\n    public async setAccelerometerPeriod(frequency: AccelerometerPeriod): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return this.helper.setCharacteristicValue(AccelerometerCharacteristic.accelerometerPeriod, view);\n    }\n\n    private accelerometerDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToAccelerometerData(view);\n        this.dispatchEvent('accelerometerdatachanged', value);\n    }\n\n    private dataViewToAccelerometerData(view: DataView): AccelerometerData {\n        return {\n            x: view.getInt16(0, true) / 1000.0,\n            y: view.getInt16(2, true) / 1000.0,\n            z: view.getInt16(4, true) / 1000.0\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum MagnetometerCharacteristic {\n    magnetometerData = 'e95dfb11-251d-470a-a062-fa1922dfa9a8',\n    magnetometerPeriod = 'e95d386c-251d-470a-a062-fa1922dfa9a8',\n    magnetometerBearing = 'e95d9715-251d-470a-a062-fa1922dfa9a8',\n    magnetometerCalibration = 'e95db358-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * Data received from the magnetometer\n */\nexport interface MagnetometerData {\n    /**\n     * Force in direction X\n     */\n    x: number;\n    /**\n     * Force in direction Y\n     */\n    y: number;\n    /**\n     * Force in direction Z\n     */\n    z: number;\n}\n\n/**\n * Magnetometer calibation state\n */\nexport enum MagnetometerCalibration {\n    /**\n     * Unknown state\n     */\n    unknown = 0,\n    /**\n     * Calibration has been requestes\n     */\n    requested = 1,\n    /**\n     * Calibration completed\n     */\n    completed = 2,\n    /**\n     * Calibration had an error\n     */\n    errored = 3\n}\n\n/**\n * The sample period to read magnetometer data (milliseconds)\n */\nexport type MagnetometerPeriod = 1 | 2 | 5 | 10 | 20 | 80 | 160 | 640;\n\n/**\n * Events raised by the magnetometer service\n */\nexport interface MagnetometerEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof MagnetometerEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof MagnetometerEvents;\n    /**\n     * Magnetometer data changed event\n     */\n    magnetometerdatachanged: MagnetometerData;\n    /**\n     * Magnetometer bearing changed event\n     */\n    magnetometerbearingchanged: number;\n    /**\n     * Magnetometer calibration changed event\n     */\n    magnetometercalibrationchanged: MagnetometerCalibration;\n}\n\n/**\n * Magnetometer Service\n */\nexport class MagnetometerService extends (EventDispatcher as new() => TypedDispatcher<MagnetometerEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95df2d8-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<MagnetometerService> {\n        const bluetoothService = new MagnetometerService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('magnetometerdatachanged', MagnetometerCharacteristic.magnetometerData, this.magnetometerDataChangedHandler.bind(this));\n        await this.helper.handleListener('magnetometerbearingchanged', MagnetometerCharacteristic.magnetometerBearing, this.magnetometerBearingChangedHandler.bind(this));\n        await this.helper.handleListener('magnetometercalibrationchanged', MagnetometerCharacteristic.magnetometerCalibration, this.magnetometerCalibrationChangedHandler.bind(this));\n    }\n\n    /**\n     * Request magnetometer calibration\n     */\n    public async calibrate() {\n        return this.helper.setCharacteristicValue(MagnetometerCharacteristic.magnetometerCalibration, new Uint8Array([1]));\n    }\n\n    /**\n     * Read magnetometer data\n     */\n    public async readMagnetometerData(): Promise<MagnetometerData> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerData);\n        return this.dataViewToMagnetometerData(view);\n    }\n\n    /**\n     * Read magnetometer bearing\n     */\n    public async readMagnetometerBearing(): Promise<number | undefined> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerBearing);\n        if (view.byteLength === 2) {\n            return view.getUint16(0, true);\n        }\n        return undefined;\n    }\n\n    /**\n     * Get magnetometer sample period\n     */\n    public async getMagnetometerPeriod(): Promise<MagnetometerPeriod> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerPeriod);\n        return view.getUint16(0, true) as MagnetometerPeriod;\n    }\n\n    /**\n     * Set magnetometer sample period\n     * @param frequency The frequency interval to use\n     */\n    public async setMagnetometerPeriod(frequency: MagnetometerPeriod): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return this.helper.setCharacteristicValue(MagnetometerCharacteristic.magnetometerPeriod, view);\n    }\n\n    private magnetometerDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToMagnetometerData(view);\n        this.dispatchEvent('magnetometerdatachanged', value);\n    }\n\n    private magnetometerBearingChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        if (view.byteLength === 2) {\n            this.dispatchEvent('magnetometerbearingchanged', view.getUint16(0, true));\n        }\n    }\n\n    private magnetometerCalibrationChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        if (view.byteLength === 1) {\n            this.dispatchEvent('magnetometercalibrationchanged', view.getUint8(0) as MagnetometerCalibration);\n        }\n    }\n\n    private dataViewToMagnetometerData(view: DataView): MagnetometerData {\n        return {\n            x: view.getInt16(0, true),\n            y: view.getInt16(1, true),\n            z: view.getInt16(2, true)\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from '../service-helper';\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\n\n/**\n * @hidden\n */\nexport enum IoPinCharacteristic {\n    pinData = 'e95d8d00-251d-470a-a062-fa1922dfa9a8',\n    pinAdConfiguration = 'e95d5899-251d-470a-a062-fa1922dfa9a8',\n    pinIoConfiguration = 'e95db9fe-251d-470a-a062-fa1922dfa9a8',\n    pwmControl = 'e95dd822-251d-470a-a062-fa1922dfa9a8'\n}\n\nconst littleEndian = true;\n\n/**\n * Pin data\n */\nexport interface PinData {\n    /**\n     * Pin number\n     */\n    pin: number;\n    /**\n     * Pin value\n     */\n    value: number;\n}\n\n/**\n * PWM control data\n */\nexport interface PwmControlData {\n    /**\n     * Pin number\n     */\n    pin: number;\n    /**\n     * Pin value\n     */\n    value: number;\n    /**\n     * Period (in microseconds)\n     */\n    period: number;\n}\n\n/**\n * Analogue/Digital Enum\n */\nexport enum AD {\n    Digital = 0,\n    Analogue = 1\n}\n\n/**\n * Input/Output Enum\n */\nexport enum IO {\n    Output = 0,\n    Input = 1\n}\n\n/**\n * Events raised by the magnetometer service\n */\nexport interface IoPinEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof IoPinEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof IoPinEvents;\n    /**\n     * Pin data changed event\n     */\n    pindatachanged: PinData[];\n}\n\n/**\n * @hidden\n */\nexport class IoPinService extends (EventDispatcher as new() => TypedDispatcher<IoPinEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95d127b-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<IoPinService> {\n        const bluetoothService = new IoPinService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    /**\n     * @hidden\n     */\n    public helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('pindatachanged', IoPinCharacteristic.pinData, this.pinDataChangedHandler.bind(this));\n    }\n\n    /**\n     * Read pin data\n     */\n    public async readPinData(): Promise<PinData[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinData);\n        return this.dataViewToPinData(view);\n    }\n\n    /**\n     * Write pin data\n     * @param data The pin data to write\n     */\n    public async writePinData(data: PinData[]): Promise<void> {\n        const view = this.pinDataToDataView(data);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinData, view);\n    }\n\n    /**\n     * Get pin analogue/digital configuration\n     */\n    public async getAdConfiguration(): Promise<AD[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinAdConfiguration);\n        return this.dataViewToConfig(view);\n    }\n\n    /**\n     * Set pin analogue/digital configuration\n     * @param config The analogue/digital configuration to set\n     */\n    public async setAdConfiguration(config: AD[]): Promise<void> {\n        const view = this.configToDataView(config);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinAdConfiguration, view);\n    }\n\n    /**\n     * Get pin input/output configuration\n     */\n    public async getIoConfiguration(): Promise<IO[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinIoConfiguration);\n        return this.dataViewToConfig(view);\n    }\n\n    /**\n     * Set pin input/output configuration\n     * @param config The input/output configuration to set\n     */\n    public async setIoConfiguration(config: IO[]): Promise<void> {\n        const view = this.configToDataView(config);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinIoConfiguration, view);\n    }\n\n    /**\n     * Set pin PWM control\n     * @param data The PWM control data to set\n     */\n    public async setPwmControl(data: PwmControlData): Promise<void> {\n        const view = this.pwmControlDataToDataView(data);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pwmControl, view);\n    }\n\n    private pinDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToPinData(view);\n        this.dispatchEvent('pindatachanged', value);\n    }\n\n    private dataViewToPinData(view: DataView): PinData[] {\n        const data = [];\n        for (let i = 0; i < view.byteLength; i += 2) {\n            data.push({\n                pin: view.getUint8(i),\n                value: view.getUint8(i + 1)\n            });\n        }\n        return data;\n    }\n\n    private pinDataToDataView(data: PinData[]): DataView {\n        const view = new DataView(new ArrayBuffer(data.length * 2));\n        data.forEach((pinData, index) => {\n            view.setUint8(index * 2, pinData.pin);\n            view.setUint8(index * 2 + 1, pinData.value);\n        });\n        return view;\n    }\n\n    private dataViewToConfig(view: DataView): number[] {\n        const result: number[] = [];\n        const value = (view.getUint16(0) << 8) + view.getUint8(2);\n\n        for (let i = 0; i < 24; i++) {\n            result.push(value >> i);\n        }\n\n        return result;\n    }\n\n    private configToDataView(config: number[]): DataView {\n        const view = new DataView(new ArrayBuffer(3));\n        let value = 0;\n\n        for (let i = 0; i < config.length; i++) {\n            value &= 1 << config[i];\n        }\n\n        view.setUint16(0, value >> 8, littleEndian);\n        view.setUint8(2, value & 0xff);\n        return view;\n    }\n\n    private pwmControlDataToDataView(data: PwmControlData): DataView {\n        const view = new DataView(new ArrayBuffer(7));\n        view.setUint8(0, data.pin);\n        view.setUint16(1, data.value, littleEndian);\n        view.setUint32(3, data.period, littleEndian);\n        return view;\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum UartCharacteristic {\n    tx = '6e400002-b5a3-f393-e0a9-e50e24dcca9e',\n    rx = '6e400003-b5a3-f393-e0a9-e50e24dcca9e'\n}\n\n/**\n * Events raised by the UART service\n */\nexport interface UartEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof UartEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof UartEvents;\n    /**\n     * Serial data received event\n     */\n    receive: Uint8Array;\n    /**\n     * Serial received text event\n     */\n    receiveText: string;\n}\n\n/**\n * UART Service\n */\nexport class UartService extends (EventDispatcher as new() => TypedDispatcher<UartEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<UartService> {\n        const bluetoothService = new UartService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('receive', UartCharacteristic.tx, this.receiveHandler.bind(this));\n        await this.helper.handleListener('receiveText', UartCharacteristic.tx, this.receiveTextHandler.bind(this));\n    }\n\n    /**\n     * Send serial data\n     * @param value The buffer to send\n     */\n    public async send(value: BufferSource): Promise<void> {\n        return this.helper.setCharacteristicValue(UartCharacteristic.rx, value);\n    }\n\n    /**\n     * Send serial text\n     * @param value The text to send\n     */\n    public async sendText(value: string): Promise<void> {\n        const encoder = new TextEncoder();\n        const buffer = encoder.encode(value);\n        return this.helper.setCharacteristicValue(UartCharacteristic.rx, buffer);\n    }\n\n    private receiveHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = new Uint8Array(view.buffer);\n        this.dispatchEvent('receive', value);\n    }\n\n    private receiveTextHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const decoder = new TextDecoder();\n        const value = decoder.decode(view.buffer);\n        this.dispatchEvent('receiveText', value);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum EventCharacteristic {\n    microBitRequirements = 'e95db84c-251d-470a-a062-fa1922dfa9a8',\n    microBitEvent = 'e95d9775-251d-470a-a062-fa1922dfa9a8',\n    clientRequirements = 'e95d23c4-251d-470a-a062-fa1922dfa9a8',\n    clientEvent = 'e95d5404-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * micro:bit event\n */\nexport interface MicrobitEvent {\n    /**\n     * The type of event\n     */\n    type: number;\n    /**\n     * The value for the event\n     */\n    value: number;\n}\n\n/**\n * Events raised by the event service\n */\nexport interface MicrobitEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof MicrobitEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof MicrobitEvents;\n    /**\n     * micro:bit requirements changed event\n     */\n    microbitrequirementschanged: MicrobitEvent;\n    /**\n     * micro:bit event event\n     */\n    microbitevent: MicrobitEvent;\n}\n\n/**\n * Event Service\n */\nexport class EventService extends (EventDispatcher as new() => TypedDispatcher<MicrobitEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95d93af-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<EventService> {\n        const bluetoothService = new EventService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener('microbitevent', EventCharacteristic.microBitEvent, this.eventHandler.bind(this));\n        await this.helper.handleListener('microbitrequirementschanged', EventCharacteristic.microBitRequirements, this.microbitRequirementsChangedHandler.bind(this));\n    }\n\n    /**\n     * Get micro:bit event requirements\n     */\n    public async getMicrobitRequirements(): Promise<MicrobitEvent> {\n        const view = await this.helper.getCharacteristicValue(EventCharacteristic.microBitRequirements);\n        return this.viewToMicrobitEvent(view);\n    }\n\n    /**\n     * Set client event requirements\n     * @param type The type of event to set\n     * @param value The value to set\n     */\n    public async setClientRequirements(type: number, value: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint16(0, type, true);\n        view.setUint16(1, value, true);\n        return await this.helper.setCharacteristicValue(EventCharacteristic.clientRequirements, view);\n    }\n\n    /**\n     * Read micro:bit event\n     */\n    public async readMicrobitEvent(): Promise<MicrobitEvent> {\n        const view = await this.helper.getCharacteristicValue(EventCharacteristic.microBitEvent);\n        return this.viewToMicrobitEvent(view);\n    }\n\n    /**\n     * Write client event\n     * @param type The event type\n     * @param value The event value\n     */\n    public async writeClientEvent(type: number, value: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint16(0, type, true);\n        view.setUint16(1, value, true);\n        return await this.helper.setCharacteristicValue(EventCharacteristic.clientEvent, view);\n    }\n\n    private microbitRequirementsChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const microbitEvent = this.viewToMicrobitEvent(view);\n        this.dispatchEvent('microbitrequirementschanged', microbitEvent);\n    }\n\n    private eventHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const microbitEvent = this.viewToMicrobitEvent(view);\n        this.dispatchEvent('microbitevent', microbitEvent);\n    }\n\n    private viewToMicrobitEvent(view: DataView): MicrobitEvent {\n        const type = view.getUint16(0, true);\n        const value = view.getUint16(1, true);\n        return {\n            type,\n            value\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from '../service-helper';\n\n/**\n * @hidden\n */\nexport enum DfuCharacteristic {\n    dfuControl = 'e95d93b1-251d-470a-a062-fa1922dfa9a8'\n}\n\n/**\n * @hidden\n */\nexport class DfuControlService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = 'e95d93b0-251d-470a-a062-fa1922dfa9a8';\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<DfuControlService> {\n        return new DfuControlService(service);\n    }\n\n    /**\n     * @hidden\n     */\n    public helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Request device switches to DFU mode\n     */\n    public requestDfu(): Promise<void> {\n        return this.helper.setCharacteristicValue(DfuCharacteristic.dfuControl, new Uint8Array([1]));\n    }\n\n    /**\n     * Request flash code\n     */\n    public requestFlashCode(): Promise<void> {\n        return this.helper.setCharacteristicValue(DfuCharacteristic.dfuControl, new Uint8Array([2]));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2024 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the 'Software'), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { UartService } from './uart';\nimport { EventDispatcher, TypedDispatcher } from '../event-dispatcher';\n\n/**\n * Events raised by the RPV service\n */\nexport interface UartEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof UartEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof UartEvents;\n    /**\n     * Command received event\n     */\n    receiveCommand: {\n        command: string;\n        value?: number;\n    };\n}\n\n/**\n * RPC Service\n */\nexport class RpcService extends (EventDispatcher as new() => TypedDispatcher<UartEvents>) {\n\n    public constructor(protected uartService: UartService) {\n        super();\n        uartService.addEventListener('receiveText', e => {\n            const message = e.detail;\n            if (message.startsWith('c:')) {\n                const parts = message.replace('c:', '').split(':');\n                const command = parts[0];\n                const value = parts[1];\n                this.emit('receiveCommand', { command, value: value ? parseInt(value, 10) : undefined });\n            }\n        });\n    }\n\n    public async arg(value: number, command = 'arg') {\n        const message = `c:${command}:${value}\\n`;\n        await this.uartService.sendText(message);\n    }\n\n    public async narg(command = 'narg') {\n        const message = `c:${command}\\n`;\n        await this.uartService.sendText(message);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { DeviceInformationService } from './services/device-information';\nimport { ButtonService } from './services/button';\nimport { LedService } from './services/led';\nimport { TemperatureService } from './services/temperature';\nimport { AccelerometerService } from './services/accelerometer';\nimport { MagnetometerService } from './services/magnetometer';\nimport { IoPinService } from './services/io-pin';\nimport { UartService } from './services/uart';\nimport { EventService } from './services/event';\nimport { DfuControlService } from './services/dfu-control';\nimport { RpcService } from './services/rpc';\n\nexport interface Services {\n    deviceInformationService?: DeviceInformationService;\n    buttonService?: ButtonService;\n    ledService?: LedService;\n    temperatureService?: TemperatureService;\n    accelerometerService?: AccelerometerService;\n    magnetometerService?: MagnetometerService;\n    uartService?: UartService;\n    eventService?: EventService;\n    dfuControlService?: DfuControlService;\n    ioPinService?: IoPinService;\n    rpcService?: RpcService;\n}\n\n/**\n * @hidden\n */\ninterface Service {\n    uuid: BluetoothCharacteristicUUID;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    create(service: BluetoothRemoteGATTService): Promise<any>;\n}\n\n/**\n * @hidden\n */\nclass ServiceBuilder {\n\n    constructor(private services: BluetoothRemoteGATTService[]) {\n    }\n\n    public async createService<T>(serviceClass: (new (service: BluetoothRemoteGATTService) => T) & Service): Promise<T | undefined> {\n        const found = this.services.find(service => service.uuid === serviceClass.uuid);\n\n        if (!found) {\n            return undefined;\n        }\n\n        return await serviceClass.create(found);\n    }\n}\n\nexport const requestMicrobit = async (bluetooth: Bluetooth): Promise<BluetoothDevice | undefined> => {\n    const device = await bluetooth.requestDevice({\n        filters: [\n            {\n                namePrefix: 'BBC micro:bit'\n            }\n        ],\n        optionalServices: [\n            DeviceInformationService.uuid,\n            ButtonService.uuid,\n            LedService.uuid,\n            TemperatureService.uuid,\n            AccelerometerService.uuid,\n            MagnetometerService.uuid,\n            IoPinService.uuid,\n            UartService.uuid,\n            EventService.uuid,\n            DfuControlService.uuid\n        ]\n    });\n\n    return device;\n};\n\nexport const getServices = async (device: BluetoothDevice): Promise<Services> => {\n    if (!device || !device.gatt) {\n        return {};\n    }\n\n    if (!device.gatt.connected) {\n        await device.gatt.connect();\n    }\n\n    const services = await device.gatt.getPrimaryServices();\n    const builder = new ServiceBuilder(services);\n\n    const deviceInformationService = await builder.createService(DeviceInformationService);\n    const buttonService = await builder.createService(ButtonService);\n    const ledService = await builder.createService(LedService);\n    const temperatureService = await builder.createService(TemperatureService);\n    const accelerometerService = await builder.createService(AccelerometerService);\n    const magnetometerService = await builder.createService(MagnetometerService);\n    const uartService = await builder.createService(UartService);\n    const eventService = await builder.createService(EventService);\n    const dfuControlService = await builder.createService(DfuControlService);\n    const ioPinService = await builder.createService(IoPinService);\n    const rpcService = uartService ? new RpcService(uartService) : undefined;\n\n    return {\n        deviceInformationService,\n        buttonService,\n        ledService,\n        temperatureService,\n        accelerometerService,\n        magnetometerService,\n        uartService,\n        eventService,\n        dfuControlService,\n        ioPinService,\n        rpcService\n    };\n};\n"],"names":["DeviceInformationCharacteristic","PromiseQueue","concurrent","this","queue","running","prototype","pump","promise","shift","fn","result","_a","sent","resolve","reject","error_1","add","_this","Promise","push","ServiceHelper","service","emitter","getCharacteristic","uuid","characteristics","getCharacteristics","_b","find","characteristic","getCharacteristicValue","Error","__awaiter","__generator","readValue","setCharacteristicValue","value","writeValue","handleListener","event","handler","startNotifications","on","emitterEvent","listenerCount","addEventListener","removeEventListener","DeviceInformationService","helper","create","readDeviceInformation","info","readStringCharacteristic","modelNumber","serialNumber","firmwareRevision","hardwareRevision","manufacturer","view","TextDecoder","decode","buffer","undefined","ButtonCharacteristic","ButtonState","EventDispatcher","_super","isEventListenerObject","listener","handleEvent","__extends","type","addListener","call","callback","removeListener","dispatchEvent","eventOrType","detail","CustomEvent","emit","EventEmitter","LedCharacteristic","ButtonService","bluetoothService","init","buttonAState","buttonAStateChangedHandler","bind","buttonBState","buttonBStateChangedHandler","readButtonAState","getUint8","readButtonBState","target","TemperatureCharacteristic","LedService","writeText","text","encoded","encodeString","ledText","readMatrixState","ledMatrixState","viewToLedMatrix","writeMatrixState","state","ledMatrixToView","getScrollingDelay","scrollingDelay","getUint16","setScrollingDelay","delay","DataView","ArrayBuffer","setUint16","TextEncoder","encode","matrix","i","byteToBoolArray","byte","bools","length","reverse","setUint8","boolArrayToByte","reduce","bool","AccelerometerCharacteristic","TemperatureService","temperature","temperatureChangedHandler","readTemperature","getInt8","getTemperaturePeriod","temperaturePeriod","setTemperaturePeriod","frequency","MagnetometerCharacteristic","MagnetometerCalibration","AccelerometerService","accelerometerData","accelerometerDataChangedHandler","readAccelerometerData","dataViewToAccelerometerData","getAccelerometerPeriod","accelerometerPeriod","setAccelerometerPeriod","x","getInt16","y","z","IoPinCharacteristic","MagnetometerService","magnetometerData","magnetometerDataChangedHandler","magnetometerBearing","magnetometerBearingChangedHandler","magnetometerCalibration","magnetometerCalibrationChangedHandler","calibrate","Uint8Array","readMagnetometerData","dataViewToMagnetometerData","readMagnetometerBearing","byteLength","getMagnetometerPeriod","magnetometerPeriod","setMagnetometerPeriod","AD","IO","littleEndian","UartCharacteristic","IoPinService","pinData","pinDataChangedHandler","readPinData","dataViewToPinData","writePinData","data","pinDataToDataView","getAdConfiguration","pinAdConfiguration","dataViewToConfig","setAdConfiguration","config","configToDataView","getIoConfiguration","pinIoConfiguration","setIoConfiguration","setPwmControl","pwmControlDataToDataView","pwmControl","pin","forEach","index","setUint32","period","EventCharacteristic","UartService","tx","receiveHandler","receiveTextHandler","send","rx","sendText","encoder","DfuCharacteristic","EventService","microBitEvent","eventHandler","microBitRequirements","microbitRequirementsChangedHandler","getMicrobitRequirements","viewToMicrobitEvent","setClientRequirements","clientRequirements","readMicrobitEvent","writeClientEvent","clientEvent","microbitEvent","DfuControlService","requestDfu","dfuControl","requestFlashCode","RpcService","uartService","e","message","startsWith","parts","replace","split","command","parseInt","arg","value_1","arguments","concat","narg","ServiceBuilder","services","createService","serviceClass","found","device","gatt","connected","connect","getPrimaryServices","builder","deviceInformationService","buttonService","ledService","temperatureService","accelerometerService","magnetometerService","eventService","dfuControlService","ioPinService","rpcService","bluetooth","requestDevice","filters","namePrefix","optionalServices"],"mappings":"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"}